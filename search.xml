<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计划</title>
      <link href="/2023/06/20/%E8%AE%A1%E5%88%92/"/>
      <url>/2023/06/20/%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>123</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>saas行业的灵魂是什么</title>
      <link href="/2023/06/12/saas%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%81%B5%E9%AD%82%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2023/06/12/saas%E8%A1%8C%E4%B8%9A%E7%9A%84%E7%81%B5%E9%AD%82%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>SaaS行业的灵魂是基于服务模式的创新和客户体验。<br>SaaS平台不仅提供软件产品，还提供更多的服务，例如教育、支持、咨询和培训等。SaaS公司需要以客户为中心，提供个性化和定制化服务，以满足客户独特的需求。</p><p>另外，SaaS行业的灵魂还在于其灵活性和可伸缩性。随着企业和用户需求的变化，SaaS平台必须能够快速响应并调整其产品和服务，以便保持竞争优势并满足不断变化的市场需求。</p><p>最后，SaaS行业的灵魂在于其数据驱动和智能化的特点。SaaS公司可以通过大数据分析和机器学习技术来挖掘客户行为数据和反馈，从而改进产品和服务，并提高客户满意度和忠诚度。</p><p>综上所述，SaaS行业的灵魂是基于服务模式的创新和客户体验、灵活性和可伸缩性，以及数据驱动和智能化的特点。这些因素共同构成了SaaS行业的核心优势和价值，使其成为当今商业世界中的重要组成部分。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SaaS行业的核心竞争力</title>
      <link href="/2023/06/12/SaaS%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%A0%B8%E5%BF%83%E7%AB%9E%E4%BA%89%E5%8A%9B/"/>
      <url>/2023/06/12/SaaS%E8%A1%8C%E4%B8%9A%E7%9A%84%E6%A0%B8%E5%BF%83%E7%AB%9E%E4%BA%89%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>SaaS行业的核心竞争力在于以下几点：</p><ol><li><p>技术：SaaS公司需要拥有先进的技术和强大的开发能力，以确保其平台的性能、功能和安全。</p></li><li><p>用户体验：用户体验是SaaS公司的关键要素之一。一个易于使用、简洁、快速响应和可定制的界面将吸引更多的用户。</p></li><li><p>安全性：随着越来越多的数据存储在云端，保护客户的信息和数据安全成为SaaS公司的首要任务之一。具有有效的安全措施和防护机制的SaaS公司可以增强用户信任度。</p></li><li><p>适应性：由于市场需求、技术变化和客户需求的变化，SaaS公司需要保持灵活性和适应性，以便迅速调整他们的产品，以满足不断变化的市场需求。</p></li><li><p>成本效益：通过提供高质量的服务和附加值，使客户感受到物超所值，SaaS公司可以提高其市场份额和客户黏性。</p></li><li><p>数据分析：SaaS公司可以基于其用户的行为和反馈，利用数据分析来改善其产品和服务，从而提高用户体验和满意度。</p></li></ol><p>总之，SaaS行业的核心竞争力在于技术、用户体验、安全性、适应性、成本效益和数据分析。成功的SaaS公司需要在这些方面取得平衡，并不断发展和改进，以满足客户需求并保持市场优势。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>离骚</title>
      <link href="/2023/06/06/suiyan/%E7%A6%BB%E9%AA%9A/"/>
      <url>/2023/06/06/suiyan/%E7%A6%BB%E9%AA%9A/</url>
      
        <content type="html"><![CDATA[<p>一曲离骚<br>半注孤魂<br>寥寥青空<br>无聊纳兹</p>]]></content>
      
      
      <categories>
          
          <category> 离骚 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 去除博客中的“嗯..! 目前共计”字样</title>
      <link href="/2023/06/06/hexo/hexo-%E5%8E%BB%E9%99%A4%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E2%80%9C%E5%97%AF-%E7%9B%AE%E5%89%8D%E5%85%B1%E8%AE%A1%E2%80%9D%E5%AD%97%E6%A0%B7/"/>
      <url>/2023/06/06/hexo/hexo-%E5%8E%BB%E9%99%A4%E5%8D%9A%E5%AE%A2%E4%B8%AD%E7%9A%84%E2%80%9C%E5%97%AF-%E7%9B%AE%E5%89%8D%E5%85%B1%E8%AE%A1%E2%80%9D%E5%AD%97%E6%A0%B7/</url>
      
        <content type="html"><![CDATA[<p>注意：我使用的是next主题。</p><p>找到路径：你的博客\themes\hexo-theme-next\layout，修改archive.swig文件：</p><p>修改前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;archive-page-counter&quot;&gt;</span><br><span class="line">    &#123;% set cheers %&#125;</span><br><span class="line">    &#123;% set posts_length = site.posts.length %&#125;</span><br><span class="line">    &#123;% if posts_length &gt; 210 %&#125; &#123;% set cheers = &#x27;excellent&#x27; %&#125;</span><br><span class="line">        &#123;% elif posts_length &gt; 130 %&#125; &#123;% set cheers = &#x27;great&#x27; %&#125;</span><br><span class="line">        &#123;% elif posts_length &gt; 80 %&#125; &#123;% set cheers = &#x27;good&#x27; %&#125;</span><br><span class="line">        &#123;% elif posts_length &gt; 50 %&#125; &#123;% set cheers = &#x27;nice&#x27; %&#125;</span><br><span class="line">        &#123;% elif posts_length &gt; 30 %&#125; &#123;% set cheers = &#x27;ok&#x27; %&#125;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">        &#123;% set cheers = &#x27;um&#x27; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;&#123; __(&#x27;cheers.&#x27; + cheers) &#125;&#125;! &#123;&#123; _p(&quot;counter.archive_posts&quot;, site.posts.length) &#125;&#125; &#123;&#123; __(&#x27;keep_on&#x27;) &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>修改后：目前共计 xx 篇日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;archive-page-counter&quot;&gt;</span><br><span class="line">        &#123;&#123; _p(&quot;counter.archive_posts&quot;, site.posts.length) &#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>你也可以全部删掉那些代码，删掉就不会显示了。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023-06-05 admin</title>
      <link href="/2023/06/05/service/2023-06-05%20admin/"/>
      <url>/2023/06/05/service/2023-06-05%20admin/</url>
      
        <content type="html"><![CDATA[<p>暂无</p>]]></content>
      
      
      <categories>
          
          <category> 维护日志 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章设置摘要</title>
      <link href="/2023/06/03/hexo/hexo%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E6%91%98%E8%A6%81/"/>
      <url>/2023/06/03/hexo/hexo%E6%96%87%E7%AB%A0%E8%AE%BE%E7%BD%AE%E6%91%98%E8%A6%81/</url>
      
        <content type="html"><![CDATA[<p>方法一：直接在文章里的description写摘要</p><p>方法二：在文章里某个地方加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><p>这样你就能看见下面出现了一个阅读全文的按钮</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Couldn&#39;t find a tree builder with the features you requested: lxml. Do you need to install a parser library?</title>
      <link href="/2023/06/03/technology/Couldn-t-find-a-tree-builder-with-the-features-you-requested-lxml-Do-you-need-to-install-a-parser-library/"/>
      <url>/2023/06/03/technology/Couldn-t-find-a-tree-builder-with-the-features-you-requested-lxml-Do-you-need-to-install-a-parser-library/</url>
      
        <content type="html"><![CDATA[<p>问题描述：运行一个py文件，报错：找不到具有您请求的功能的树生成器：lxml。你需要安装解析器库吗？<br>原因：有一个叫做lxml的库没有安装，请安装它。<br>运行一个py文件，问题定位到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html=self.get_html(url)</span><br><span class="line">soup=BeautifulSoup(html,&#x27;lxml&#x27;)</span><br></pre></td></tr></table></figure><p>解决方案：打开cmd，运行下面代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>等待安装成功，再次运行py文件就不会报这个错了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+next主题之如何设置菜单图标</title>
      <link href="/2023/06/03/hexo/hexo-next%E4%B8%BB%E9%A2%98%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E8%8F%9C%E5%8D%95%E5%9B%BE%E6%A0%87/"/>
      <url>/2023/06/03/hexo/hexo-next%E4%B8%BB%E9%A2%98%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E8%8F%9C%E5%8D%95%E5%9B%BE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>注意是next主题</p><p>找到 你的博客\themes\hexo-theme-next里的_config.yml文件，搜索menu，如：</p><div class="cnblogs_code"><pre><span style="color: #000000;">menu:  home: </span>/||home  about: /about/||<span style="color: #000000;">user  tags: </span>/tags/||<span style="color: #000000;">tags  categories: </span>/categories/||<span style="color: #000000;">th  archives: </span>/archives/||<span style="color: #000000;">archive  album: </span>/album/</pre></div><p>比如我现在创建了album（相册）菜单，我该怎么添加它的icon呢，是这样的，menu的格式为：</p> <p>菜单名: /菜单名/||图标名称</p><p>注意：/和||之间不要有空格，不然路径会多出一个%20</p><p>OK，把/album/改成/album/||image，即添加了一个名为image的图标</p><span id="more"></span><p>再次注意：image或者上面的user或者tags都是指向hexo引用的fa awesome字体图标库，图标名要和这个库对应上</p><p>我之前是这么写的</p><div class="cnblogs_code"><pre><span style="color: #000000;">album:     url: </span>/album/<span style="color: #000000;">    icon: fa fa</span>-image</pre></div><p>结果发现它的图标是一个圆形的问号，改成这样也不行：</p><div class="cnblogs_code"><pre><span style="color: #000000;">album:     url: </span>/album/<span style="color: #000000;">    icon: image</span></pre></div><p>最后通过观察next主题的默认配置，才发现它的图标要写在/||后面才行。</p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初试python爬取文章</title>
      <link href="/2023/06/03/technology/%E5%88%9D%E8%AF%95python%E7%88%AC%E5%8F%96%E6%96%87%E7%AB%A0/"/>
      <url>/2023/06/03/technology/%E5%88%9D%E8%AF%95python%E7%88%AC%E5%8F%96%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>注意：本实验是在windows系统下操作。</p><p>首先配置python环境以及安装一些必要的库：</p><p>安装python请前往python官网下载，仙人指路👉<a href="https://www.python.org/ftp/python/3.11.3/python-3.11.3-amd64.exe" target="_blank">https://www.python.org/ftp/python/3.11.3/python-3.11.3-amd64.exe</a></p><p>下载完并安装成功后，在终端输入</p><div class="cnblogs_code"><pre>py --version</pre></div><pre>输出：Python 3.11.3</pre><p>检查pip是否安装成功，ps：一般现在安装python都会带有pip；</p><div class="cnblogs_code"><pre>pip --version</pre></div><p>或者</p><div class="cnblogs_code"><pre>pip3 --version</pre></div> <span id="more"></span>输出pip 22.3.1<p>如果都不输出版本号，可以查看一下系统变量有没有配置了pip的路径，没有配置就配置一下：</p><p>找到python安装路径，打开环境变量-系统变量，选择path，选择新建，把python script文件夹路径复制进去即可。</p><p>实在是没有安装可以到这里安装下载pip：<a href="https://pip.pypa.io/en/stable/installation/#" target="_blank">https://pip.pypa.io/en/stable/installation/#</a></p><p>上面两都有版本号了即表示第一步成功，接着安装4个库：</p><div class="cnblogs_code"><pre>pip install requests</pre></div><div class="cnblogs_code"><pre>pip install beautifulsoup4</pre></div><div class="cnblogs_code"><pre>pip install xlwt</pre></div><div class="cnblogs_code"><pre>pip install pymysql</pre></div><div>各自库的作用是：</div><div>requests：获取网页数据</div><div>BeautifulSoup：网页解析</div><div><div>xlwt：进行excel操作</div><div>pymysql：<em id="__mceDel">连接mysql数据库</em></div></div><p>这样第二步就算完成了，第三步：新建hello.py，输入代码：</p><div class="cnblogs_code"><pre># -*- coding = utf-8 -*-<span style="color: #000000;"># @Time : </span>2022/4/27 8:21<span style="color: #000000;"># @Author :王敬博# @File : test.py# @Software: PyCharmfrom bs4 import BeautifulSoup  #网页解析import re    #正则表表达式文字匹配import urllib.request,urllib.error  #指定url，获取网页数据import xlwt  #进行excel操作import sqlite3  #进行SQLite数据库操作import pymysql.cursors  #连接mysql数据库<p>def main():<br>    baseurl </span>&#x3D; “<a href="https://www.cnblogs.com/wjingbo/default.html?page=">https://www.cnblogs.com/wjingbo/default.html?page=</a>“<span style="color: #000000;"><br>    datalist </span>&#x3D;<span style="color: #000000;"> getData(baseurl)         #调研分析数据函数<br>    #</span>1<span style="color: #000000;"> 爬取网页<br>    savepath </span>&#x3D; “.\权。的博客信息.xls”<span style="color: #000000;">     #excel保存的位置名称 #注意：！这里的名字可以自定义，比如iuniko.xls<br>    saveData(datalist,savepath)          #调用保存函数</p><p>def askURL(url):<br>    head </span>&#x3D;<span style="color: #000000;"> {   #伪装请求头，模拟浏览器访问<br>       </span>“User-Agent”:” Mozilla &#x2F; 5.0(Linux;Android6.0;Nexus5 Build &#x2F; MRA58N) AppleWebKit &#x2F; 537.36(KHTML, likeGecko) Chrome &#x2F; 99.0.4844.51Mobile Safari &#x2F; 537.36”<span style="color: #000000;"><br>    }<br>    request </span>&#x3D; urllib.request.Request(url,headers&#x3D;<span style="color: #000000;">head)<br>    html </span>&#x3D; “”<br>    <span style="color: #0000ff;">try</span><span style="color: #000000;">:<br>        response </span>&#x3D;<span style="color: #000000;"> urllib.request.urlopen(request)<br>        html </span>&#x3D; response.read().decode(‘utf-8’<span style="color: #000000;">)<br>        #print(html)<br>    except urllib.error.URLError as e:<br>        </span><span style="color: #0000ff;">if</span> hasattr(e,”code”<span style="color: #000000;">):<br>            print(e.code)<br>        </span><span style="color: #0000ff;">if</span> hasattr(e,”reason”<span style="color: #000000;">):<br>            print(e.reason)<br>    </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> html  #返回爬到所有的html数据</p><p>#正则表达式控制获取详细内容<br>findTitle </span>&#x3D; re.compile(r’&lt;span&gt;(.<em>?)&lt;&#x2F;span&gt;’<span style="color: #000000;">,re.S)<br>findlink </span>&#x3D; re.compile(r’&lt;a class&#x3D;”postTitle2 vertical-middle” href&#x3D;”(.</em>?)”&gt;’<span style="color: #000000;">)<br>findzhaiyao </span>&#x3D; re.compile(r’&lt;div class&#x3D;”c_b_p_desc”(.<em>?)&lt;a’<span style="color: #000000;">,re.S)<br>#注意了！这里有一个坑，原作者没有标记出来，就是下面这个权字你得换成你的博客的名字，比如我博客名字叫哎呦你可棒棒了，那就填这个名字进去，不然会报错：list index out of range<br>finddate </span>&#x3D; re.compile(r’&lt;div class&#x3D;”postDesc”&gt;posted @(.</em>?)权’<span style="color: #000000;">,re.S)<br>findread </span>&#x3D; re.compile(r’&lt;span class&#x3D;”post-view-count” data-post-id&#x3D;(.<em>?)&lt;&#x2F;span&gt;’<span style="color: #000000;">)<br>findcomment </span>&#x3D; re.compile(r’&lt;span class&#x3D;”post-comment-count” data-post-id&#x3D;(.</em>?)&lt;&#x2F;span&gt;’<span style="color: #000000;">)<br>finddigg </span>&#x3D; re.compile(r’&lt;span class&#x3D;”post-digg-count” data-post-id&#x3D;(.*?)&lt;&#x2F;span&gt;’<span style="color: #000000;">)</p><p>def getData(baseurl):<br>    datalist </span>&#x3D; []  # 2<span style="color: #000000;"> 解析数据<br>    allTitle </span>&#x3D;<span style="color: #000000;"> []  #存储标题<br>    allLink </span>&#x3D;<span style="color: #000000;"> []   #存储链接<br>    allZhaiyao </span>&#x3D;<span style="color: #000000;"> [] #存储摘要<br>    alldate </span>&#x3D;<span style="color: #000000;"> []    #存储日期<br>    allRead </span>&#x3D;<span style="color: #000000;"> []    #存储阅读数<br>    allComment </span>&#x3D;<span style="color: #000000;"> [] #存储评论数<br>    allDigg </span>&#x3D;<span style="color: #000000;"> []    #存储推荐数 # 注意：45代表爬取45页，我的公开的随笔数量是440，所以我要写成45，也就是会爬取450条数据<br>    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(0,10<span style="color: #000000;">):<br>        url </span>&#x3D; baseurl + str(i+1)    #对目标链接地址page&#x3D;<span style="color: #000000;">后面的数字进行循环<br>        html </span>&#x3D;<span style="color: #000000;"> askURL(url)          #调用爬取的函数<br>        soup </span>&#x3D; BeautifulSoup(html, “html.parser”<span style="color: #000000;">)</p><pre><code>    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; item &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; soup.find_all(&#39;div&#39;,class_=&quot;day&quot;&lt;span style=&quot;color: #000000;&quot;&gt;):  #简单过滤信息        #print(item)        item &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; str(item)        title &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(findTitle,item)     #匹配数据        allTitle.extend(title)      #添加数据到列表        link &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(findlink,item)        allLink.extend(link)        zhaiyao &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(findzhaiyao,item)        allZhaiyao.extend(zhaiyao)        date &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(finddate,item)        alldate.extend(date)        readNum &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(findread,item)        allRead.extend(readNum)        commentNum &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(findcomment,item)        allComment.extend(commentNum)        diggNum &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; re.findall(finddigg,item)        allDigg.extend(diggNum)#print(allTitle)#print(allLink)#print(allZhaiyao)#print(alldate)#print(allRead)#print(allComment)#print(allDigg)&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; j &lt;span style=&quot;color: #0000ff;&quot;&gt;in&lt;/span&gt; range(0,100&lt;span style=&quot;color: #000000;&quot;&gt;):     #循环10页就是100条数据，45页就是450条数据 #这个循环是过滤掉所有不需要的信息    data &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; []    title &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; allTitle[j].strip()     #去除字符串里的空格    data.append(title)    link &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; allLink[j]    data.append(link)    zhaiyao &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; allZhaiyao[j].strip()    zhaiyao &lt;/span&gt;= zhaiyao.split(&#39;&quot;&amp;gt;&#39;)[1&lt;span style=&quot;color: #000000;&quot;&gt;]    data.append(zhaiyao.replace(&lt;/span&gt;&quot;\n&quot;,&quot;&quot;&lt;span style=&quot;color: #000000;&quot;&gt;))    date &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; alldate[j].strip()    data.append(date)    readNum &lt;/span&gt;= allRead[j].split(&#39;&amp;gt;&#39;)[1&lt;span style=&quot;color: #000000;&quot;&gt;]      #通过分割字符串来去除无用信息    data.append(readNum)    commentNum &lt;/span&gt;= allComment[j].split(&#39;&amp;gt;&#39;)[1&lt;span style=&quot;color: #000000;&quot;&gt;]    data.append(commentNum)    diggNum &lt;/span&gt;= allDigg[j].split(&#39;&amp;gt;&#39;)[1&lt;span style=&quot;color: #000000;&quot;&gt;]    data.append(diggNum)    datalist.append(data)print(datalist)&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; datalist     #返回列表</code></pre><p>def saveData(datalist,savepath):<br>    print(</span>“save…”<span style="color: #000000;">)<br>    book </span>&#x3D; xlwt.Workbook(encoding&#x3D;”utf-8”,style_compression&#x3D;0<span style="color: #000000;">)<br>    sheet </span>&#x3D; book.add_sheet(‘博客园随笔列表’,cell_overwrite_ok&#x3D;<span style="color: #000000;">True)    #创建sheet1<br>    col </span>&#x3D; (“标题”,”原文链接”,”摘要”,”时间”,”阅读”,”评论”,”推荐”<span style="color: #000000;">)        #加标题<br>    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(0,7<span style="color: #000000;">):<br>        sheet.write(</span>0<span style="color: #000000;">,i,col[i])<br>    </span><span style="color: #0000ff;">for</span> i <span style="color: #0000ff;">in</span> range(0,100):          #添加数据到excel*<span style="color: #000000;">（100条）<br>        print(</span>“第%d条”%(i+1<span style="color: #000000;">))        #打印条数<br>        data </span>&#x3D;<span style="color: #000000;"> datalist[i]<br>        </span><span style="color: #0000ff;">for</span> j <span style="color: #0000ff;">in</span> range(0,7<span style="color: #000000;">):<br>            sheet.write(i</span>+1<span style="color: #000000;">,j,data[j])      #添加每个子列表中的7个数据<br>    book.save(savepath)            #保存excel</p><p></span><span style="color: #0000ff;">if</span> <strong>name</strong> &#x3D;&#x3D; “<strong>main</strong>“<span style="color: #000000;">:<br>    main()<br>    print(</span>“爬取完毕！”)</pre></p></div><p>hello.py的代码来自作者：<a href="https://www.cnblogs.com/wjingbo/" target="_blank">https://www.cnblogs.com/wjingbo/</a></p><p>py代码原文可前往👉：<a href="https://www.cnblogs.com/wjingbo/p/16199464.html" target="_blank">https://www.cnblogs.com/wjingbo/p/16199464.html</a></p><p>该py代码的作用是爬取指定的网站路径，然后把该路径里的相关内容取出放在excel表格里。</p><p>好了，保存并运行hello.py：</p><div class="cnblogs_code"><pre>py hello.py</pre></div><p>等待几秒即可看见生成了一个excel表格，里面是爬取<a href="https://www.cnblogs.com/wjingbo/" target="_blank">https://www.cnblogs.com/wjingbo/</a>他的文章内容。</p><p>&nbsp;</p>最后：如果你运行这个py文件出错了，报错内容还是 list index out of range（列表索引超出范围）？<p>解决方案：：你可以尝试去打印一下某个变量的值是否为空，这个报错是因为某个变量的值为空了所以就报了这个错。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo路径出现%7C%7</title>
      <link href="/2023/06/03/hexo/hexo%E8%B7%AF%E5%BE%84%E5%87%BA%E7%8E%B0-7C-7/"/>
      <url>/2023/06/03/hexo/hexo%E8%B7%AF%E5%BE%84%E5%87%BA%E7%8E%B0-7C-7/</url>
      
        <content type="html"><![CDATA[<p>该问题是由一个sidebar.swig文件引起的</p><p>解决方案：打开 你的博客\themes\hexo-theme-next\layout_macro<br> <span id="more"></span></p><p>在里面找到sidebar.swig文件，把判断代码去掉</p><p>修改前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if config.archive_dir != &#x27;/&#x27; and site.posts.length &gt; 0 %&#125;</span><br><span class="line">    &lt;div class=&quot;site-state-item site-state-posts&quot;&gt;</span><br><span class="line">    &#123;% if theme.menu.archives %&#125;</span><br><span class="line">      &lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;% else %&#125;</span><br><span class="line">      &lt;a href=&quot;&#123;&#123; url_for(config.archive_dir) &#125;&#125;&quot;&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">        &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.posts.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&#x27;state.posts&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if config.archive_dir != &#x27;/&#x27; and site.posts.length &gt; 0 %&#125;</span><br><span class="line">    &lt;div class=&quot;site-state-item site-state-posts&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(theme.menu.archives).split(&#x27;||&#x27;)[0] | trim &#125;&#125;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;a href=&quot;&#123;&#123; url_for(config.archive_dir) &#125;&#125;&quot;&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;span class=&quot;site-state-item-count&quot;&gt;&#123;&#123; site.posts.length &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;site-state-item-name&quot;&gt;&#123;&#123; __(&#x27;state.posts&#x27;) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>修改完后，保存，在终端运行</p><p><code>hexo clean</code></p><p><code>hexo g</code></p><p><code>hexo s</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo设置中文</title>
      <link href="/2023/06/03/hexo/hexo%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/"/>
      <url>/2023/06/03/hexo/hexo%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87/</url>
      
        <content type="html"><![CDATA[<p>我的博客使用的主题是Next主题</p><p>在你的博客\themes\hexo-theme-next\languages中可以看到很多的语言包</p><p>比如我要设置博客文件为简体中文，对应的就是zh-Hans</p><p>接着，在博客根目录打开_comfig.yml，修改language的值为zh-Hans即可</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed to minify the code from this file</title>
      <link href="/2022/03/31/technology/Failed-to-minify-the-code-from-this-file/"/>
      <url>/2022/03/31/technology/Failed-to-minify-the-code-from-this-file/</url>
      
        <content type="html"><![CDATA[<p>前言：项目打包报错。</p><p>报错内容：</p><div class="cnblogs_code"><pre><span style="color: #008080;"> 1</span> <span style="color: #000000;">Creating an optimized production build...</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">Failed to compile.</span><span style="color: #008080;"> 3</span> <span style="color: #008080;"> 4</span> Failed to minify the code from <span style="color: #0000ff;">this</span><span style="color: #000000;"> file:</span><span style="color: #008080;"> 5</span> <span style="color: #008080;"> 6</span> ./node_modules/_asn1.js@5.4.1@asn1.js/lib/asn1/base/node.js:283<span style="color: #008080;"> 7</span> <span style="color: #008080;"> 8</span> Read more here: http:<span style="color: #008000;">//</span><span style="color: #008000;">bit.ly/2tRViJ9</span><span style="color: #008080;"> 9</span> <span style="color: #008080;">10</span> npm ERR!<span style="color: #000000;"> code ELIFECYCLE</span><span style="color: #008080;">11</span> npm ERR! errno 1<span style="color: #008080;">12</span> npm ERR! ltjyd@0.1.0 build: `node scripts/build.js`<span style="color: #008080;">13</span> npm ERR! Exit status 1<span style="color: #008080;">14</span> npm ERR!<span style="color: #008080;">15</span> npm ERR! Failed at the ltjyd@0.1.0<span style="color: #000000;"> build script.</span><span style="color: #008080;">16</span> npm ERR! This is probably not a problem <span style="color: #0000ff;">with</span><span style="color: #000000;"> npm. There is likely additional logging output above.</span><span style="color: #008080;">17</span> <span style="color: #008080;">18</span> npm ERR! A complete log of <span style="color: #0000ff;">this</span> run can be found <span style="color: #0000ff;">in</span><span style="color: #000000;">:</span><span style="color: #008080;">19</span> npm ERR! C:\Users\Administrator\AppData\Roaming\npm-cache\_logs\2022-03-31T08_22_24_542Z-debug.log</pre></div><pre class="highlighter-hljs">关键内容：<code>Failed to minify the code from this file: ./node_modules/_asn1.js@5.4.1@asn1.js/lib/asn1/base/node.js:283</code></pre><p>翻译：未能缩小此文件👇中的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/_asn1.js@5.4.1@asn1.js/lib/asn1/base/node.js:283</span><br></pre></td></tr></table></figure><p>原因：该文件里的代码无法被打包，定位到该行代码： 【let result &#x3D; state[‘default’];】<br>解决方案：把let改为var。<br>结束语：<br>不要问我为什么，我也是找了篇文章看了才解决的，后续打包也是遇到这个问题，我依旧把let改成var就行了。<br>据原文作者说是es6转不了es5，也许就是这个原因吧。<br>原文在这：<a href="https://blog.csdn.net/u010391930/article/details/118188243">https://blog.csdn.net/u010391930/article/details/118188243</a><br>额嗯呃emmmm，其实，额，怎么说呢。<br>在我快写完这个日志的时候，我同事告诉我，这个项目其实已经打包成功了。也就是说，可以不用理会这种报错。。。<br>emmm…</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023需求最大的8种编程语言排名</title>
      <link href="/2022/02/22/%E5%85%AC%E5%91%8A/"/>
      <url>/2022/02/22/%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="第一名：JavaScript-x2F-TypeScript"><a href="#第一名：JavaScript-x2F-TypeScript" class="headerlink" title="第一名：JavaScript&#x2F;TypeScript"></a>第一名：JavaScript&#x2F;TypeScript</h3><p>JavaScript自创建以来一直很受欢迎。目前，Javascript仍然是整个市场上需求量最大的编程语言；TypeScript的到来也可能促进这一里程碑的实现。TypeScript的流行程度近年来才有所上升。许多新的JavaScript框架完全用TypeScript编写，例如Angular或NestJS。</p><p>从2021 10月到2022年11月（14个月），DevJobsScanner发现了801000个工作机会，约占有明确编程语言要求的工作的31%。<br>找到的工作：801K（约31%）</p><p>关键词：javascript，typescript，react，angular，vue，node。</p><h3 id="第二名：Python"><a href="#第二名：Python" class="headerlink" title="第二名：Python"></a>第二名：Python</h3><p>2022年，Python将成为要求第二高的编程语言。DevJobsScanner表示，它的多功能性，从脚本、运行服务器到数据分析，一直是实现这一里程碑的关键。此外，Python还有一个规模最大的社区。</p><p>在这14个月中，研究人员发现51.5万个工作机会，占20%。<br>找到的工作：515K（约20%）</p><p>关键词：蟒蛇，django，烧瓶。</p><span id="more"></span><h3 id="第三名：Java"><a href="#第三名：Java" class="headerlink" title="第三名：Java"></a>第三名：Java</h3><p>Java是需求量第三大的编程语言，自1995年创建以来一直很受欢迎。尽管随着更多现代语言（如Kotlin）的出现，它的受欢迎程度在过去几年有所下降，但它仍然稳居前三位。目前，许多知名公司都在使用Spring这样的框架，这也有助于Java保持这一地位。<br>找到的工作：443K（约17%）</p><p>关键词：java，spring。</p><h3 id="第四名：C"><a href="#第四名：C" class="headerlink" title="第四名：C#"></a>第四名：C#</h3><p>C#是一种通用的、多范式的、面向对象的编程语言，它是为了解决C++的一些弱点而创建的。作为一种通用语言，C#有广泛的用例。C#最常用的用法是。NET框架。它也被大量用于Unity游戏框架中的脚本编写。NET framework和Unity在顶级公司中很受欢迎。<br>找到的工作：305K（约12%）</p><p>关键词：c#，.net。</p><h3 id="第五名：-PHP"><a href="#第五名：-PHP" class="headerlink" title="第五名： PHP"></a>第五名： PHP</h3><p>诞生于27年前的PHP仍然是需求量第五大的编程语言。在这14个月里，研究人员发现了22.6万个相关工作机会，约占10%。<br>找到的工作：226K（~9%）</p><p>关键词：php，laravel，wordpress。</p><h3 id="第六名：C"><a href="#第六名：C" class="headerlink" title="第六名：C++"></a>第六名：C++</h3><p>C语言第一次发布至今已有50年，C++诞生至今已有37年。C++的原名是“C with Classes”。在这个漫长的时间窗口中，C&#x2F;C++通过对语言的定期补充和改进保持了其流行性。现代C++包括面向对象、通用和其他特性。它在行业中有广泛的应用。C++在很多地方都可以看到，比如视频游戏、服务器、数据库，甚至太空探测器。<br>找到的工作：213K（~8%）</p><p>关键词：c，c++。</p><h3 id="第七名：Ruby"><a href="#第七名：Ruby" class="headerlink" title="第七名：Ruby"></a>第七名：Ruby</h3><p>Ruby以12.5万份工作（约占总工作需求的5%）排名第七。它最流行的用法是与Web框架RubyonRails结合使用。尽管排名前七的人似乎并不多，但Ruby目前在一些大型科技公司有应用，如Twitter、Crunchbase或Github。<br>找到的工作：125K（约5%）</p><p>关键词：Ruby</p><h3 id="第八名：Go"><a href="#第八名：Go" class="headerlink" title="第八名：Go"></a>第八名：Go</h3><p>围棋是谷歌12年前创造的一门年轻语言。谷歌设计Go是为了在多核、网络机器和大型代码库时代提高编程效率。如下图所示，围棋的普及率正在缓慢增长，DevJobsScanner预测，到2023年，该语言可能进入前五名。Uber、Twitch和其他公司正在使用围棋。<br>找到的工作：53K（约2%）</p><p>关键词：go</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>DevJobsScanner指出，很明显，Javascript和Typescript确实主导了开发人员就业市场。在明确需要编程语言的工作中，Javascript和Typescript占31%，这意味着几乎三分之一的工作需要Javascript或Typescript。<br>Python和Java分别是2022年需求量第二和第三大的编程语言，提供了大量就业机会。然而，值得注意的是，Java正在缩小与Python的差距。在调查中，几个月内，Java工作的数量超过了Python。“因此，那些认为Java是过时的编程语言的人可能需要重新思考措辞。”<br>C#、C&#x2F;C++和PHP也是值得注意的语言，因为它们有持续上升的趋势。例如，2021 10月，PHP的需求将仅占总需求的5%左右，但到2022年11月，这一比例将接近10%，几乎翻了一番。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
